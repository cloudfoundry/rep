// Code generated by counterfeiter. DO NOT EDIT.
package auctioncellrepfakes

import (
	"sync"

	lager "code.cloudfoundry.org/lager/v3"
	"code.cloudfoundry.org/rep"
	"code.cloudfoundry.org/rep/auctioncellrep"
)

type FakeAuctionCellClient struct {
	PerformStub        func(lager.Logger, string, rep.Work) (rep.Work, error)
	performMutex       sync.RWMutex
	performArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 rep.Work
	}
	performReturns struct {
		result1 rep.Work
		result2 error
	}
	performReturnsOnCall map[int]struct {
		result1 rep.Work
		result2 error
	}
	ResetStub        func() error
	resetMutex       sync.RWMutex
	resetArgsForCall []struct {
	}
	resetReturns struct {
		result1 error
	}
	resetReturnsOnCall map[int]struct {
		result1 error
	}
	StateStub        func(lager.Logger) (rep.CellState, bool, error)
	stateMutex       sync.RWMutex
	stateArgsForCall []struct {
		arg1 lager.Logger
	}
	stateReturns struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}
	stateReturnsOnCall map[int]struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuctionCellClient) Perform(arg1 lager.Logger, arg2 string, arg3 rep.Work) (rep.Work, error) {
	fake.performMutex.Lock()
	ret, specificReturn := fake.performReturnsOnCall[len(fake.performArgsForCall)]
	fake.performArgsForCall = append(fake.performArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 rep.Work
	}{arg1, arg2, arg3})
	stub := fake.PerformStub
	fakeReturns := fake.performReturns
	fake.recordInvocation("Perform", []interface{}{arg1, arg2, arg3})
	fake.performMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuctionCellClient) PerformCallCount() int {
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	return len(fake.performArgsForCall)
}

func (fake *FakeAuctionCellClient) PerformCalls(stub func(lager.Logger, string, rep.Work) (rep.Work, error)) {
	fake.performMutex.Lock()
	defer fake.performMutex.Unlock()
	fake.PerformStub = stub
}

func (fake *FakeAuctionCellClient) PerformArgsForCall(i int) (lager.Logger, string, rep.Work) {
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	argsForCall := fake.performArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuctionCellClient) PerformReturns(result1 rep.Work, result2 error) {
	fake.performMutex.Lock()
	defer fake.performMutex.Unlock()
	fake.PerformStub = nil
	fake.performReturns = struct {
		result1 rep.Work
		result2 error
	}{result1, result2}
}

func (fake *FakeAuctionCellClient) PerformReturnsOnCall(i int, result1 rep.Work, result2 error) {
	fake.performMutex.Lock()
	defer fake.performMutex.Unlock()
	fake.PerformStub = nil
	if fake.performReturnsOnCall == nil {
		fake.performReturnsOnCall = make(map[int]struct {
			result1 rep.Work
			result2 error
		})
	}
	fake.performReturnsOnCall[i] = struct {
		result1 rep.Work
		result2 error
	}{result1, result2}
}

func (fake *FakeAuctionCellClient) Reset() error {
	fake.resetMutex.Lock()
	ret, specificReturn := fake.resetReturnsOnCall[len(fake.resetArgsForCall)]
	fake.resetArgsForCall = append(fake.resetArgsForCall, struct {
	}{})
	stub := fake.ResetStub
	fakeReturns := fake.resetReturns
	fake.recordInvocation("Reset", []interface{}{})
	fake.resetMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuctionCellClient) ResetCallCount() int {
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	return len(fake.resetArgsForCall)
}

func (fake *FakeAuctionCellClient) ResetCalls(stub func() error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = stub
}

func (fake *FakeAuctionCellClient) ResetReturns(result1 error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = nil
	fake.resetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuctionCellClient) ResetReturnsOnCall(i int, result1 error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = nil
	if fake.resetReturnsOnCall == nil {
		fake.resetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuctionCellClient) State(arg1 lager.Logger) (rep.CellState, bool, error) {
	fake.stateMutex.Lock()
	ret, specificReturn := fake.stateReturnsOnCall[len(fake.stateArgsForCall)]
	fake.stateArgsForCall = append(fake.stateArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.StateStub
	fakeReturns := fake.stateReturns
	fake.recordInvocation("State", []interface{}{arg1})
	fake.stateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuctionCellClient) StateCallCount() int {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return len(fake.stateArgsForCall)
}

func (fake *FakeAuctionCellClient) StateCalls(stub func(lager.Logger) (rep.CellState, bool, error)) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = stub
}

func (fake *FakeAuctionCellClient) StateArgsForCall(i int) lager.Logger {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	argsForCall := fake.stateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuctionCellClient) StateReturns(result1 rep.CellState, result2 bool, result3 error) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = nil
	fake.stateReturns = struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuctionCellClient) StateReturnsOnCall(i int, result1 rep.CellState, result2 bool, result3 error) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = nil
	if fake.stateReturnsOnCall == nil {
		fake.stateReturnsOnCall = make(map[int]struct {
			result1 rep.CellState
			result2 bool
			result3 error
		})
	}
	fake.stateReturnsOnCall[i] = struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuctionCellClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuctionCellClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auctioncellrep.AuctionCellClient = new(FakeAuctionCellClient)
