// Code generated by counterfeiter. DO NOT EDIT.
package maintainfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/rep/maintain"
	"github.com/tedsuo/ifrit"
)

type FakeCellPresenceClient struct {
	CellByIdStub        func(lager.Logger, string) (*models.CellPresence, error)
	cellByIdMutex       sync.RWMutex
	cellByIdArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	cellByIdReturns struct {
		result1 *models.CellPresence
		result2 error
	}
	cellByIdReturnsOnCall map[int]struct {
		result1 *models.CellPresence
		result2 error
	}
	CellEventsStub        func(lager.Logger) <-chan models.CellEvent
	cellEventsMutex       sync.RWMutex
	cellEventsArgsForCall []struct {
		arg1 lager.Logger
	}
	cellEventsReturns struct {
		result1 <-chan models.CellEvent
	}
	cellEventsReturnsOnCall map[int]struct {
		result1 <-chan models.CellEvent
	}
	CellsStub        func(lager.Logger) (models.CellSet, error)
	cellsMutex       sync.RWMutex
	cellsArgsForCall []struct {
		arg1 lager.Logger
	}
	cellsReturns struct {
		result1 models.CellSet
		result2 error
	}
	cellsReturnsOnCall map[int]struct {
		result1 models.CellSet
		result2 error
	}
	NewCellPresenceRunnerStub        func(lager.Logger, *models.CellPresence, time.Duration, time.Duration) ifrit.Runner
	newCellPresenceRunnerMutex       sync.RWMutex
	newCellPresenceRunnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.CellPresence
		arg3 time.Duration
		arg4 time.Duration
	}
	newCellPresenceRunnerReturns struct {
		result1 ifrit.Runner
	}
	newCellPresenceRunnerReturnsOnCall map[int]struct {
		result1 ifrit.Runner
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCellPresenceClient) CellById(arg1 lager.Logger, arg2 string) (*models.CellPresence, error) {
	fake.cellByIdMutex.Lock()
	ret, specificReturn := fake.cellByIdReturnsOnCall[len(fake.cellByIdArgsForCall)]
	fake.cellByIdArgsForCall = append(fake.cellByIdArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	stub := fake.CellByIdStub
	fakeReturns := fake.cellByIdReturns
	fake.recordInvocation("CellById", []interface{}{arg1, arg2})
	fake.cellByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCellPresenceClient) CellByIdCallCount() int {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	return len(fake.cellByIdArgsForCall)
}

func (fake *FakeCellPresenceClient) CellByIdCalls(stub func(lager.Logger, string) (*models.CellPresence, error)) {
	fake.cellByIdMutex.Lock()
	defer fake.cellByIdMutex.Unlock()
	fake.CellByIdStub = stub
}

func (fake *FakeCellPresenceClient) CellByIdArgsForCall(i int) (lager.Logger, string) {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	argsForCall := fake.cellByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCellPresenceClient) CellByIdReturns(result1 *models.CellPresence, result2 error) {
	fake.cellByIdMutex.Lock()
	defer fake.cellByIdMutex.Unlock()
	fake.CellByIdStub = nil
	fake.cellByIdReturns = struct {
		result1 *models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeCellPresenceClient) CellByIdReturnsOnCall(i int, result1 *models.CellPresence, result2 error) {
	fake.cellByIdMutex.Lock()
	defer fake.cellByIdMutex.Unlock()
	fake.CellByIdStub = nil
	if fake.cellByIdReturnsOnCall == nil {
		fake.cellByIdReturnsOnCall = make(map[int]struct {
			result1 *models.CellPresence
			result2 error
		})
	}
	fake.cellByIdReturnsOnCall[i] = struct {
		result1 *models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeCellPresenceClient) CellEvents(arg1 lager.Logger) <-chan models.CellEvent {
	fake.cellEventsMutex.Lock()
	ret, specificReturn := fake.cellEventsReturnsOnCall[len(fake.cellEventsArgsForCall)]
	fake.cellEventsArgsForCall = append(fake.cellEventsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.CellEventsStub
	fakeReturns := fake.cellEventsReturns
	fake.recordInvocation("CellEvents", []interface{}{arg1})
	fake.cellEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCellPresenceClient) CellEventsCallCount() int {
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	return len(fake.cellEventsArgsForCall)
}

func (fake *FakeCellPresenceClient) CellEventsCalls(stub func(lager.Logger) <-chan models.CellEvent) {
	fake.cellEventsMutex.Lock()
	defer fake.cellEventsMutex.Unlock()
	fake.CellEventsStub = stub
}

func (fake *FakeCellPresenceClient) CellEventsArgsForCall(i int) lager.Logger {
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	argsForCall := fake.cellEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCellPresenceClient) CellEventsReturns(result1 <-chan models.CellEvent) {
	fake.cellEventsMutex.Lock()
	defer fake.cellEventsMutex.Unlock()
	fake.CellEventsStub = nil
	fake.cellEventsReturns = struct {
		result1 <-chan models.CellEvent
	}{result1}
}

func (fake *FakeCellPresenceClient) CellEventsReturnsOnCall(i int, result1 <-chan models.CellEvent) {
	fake.cellEventsMutex.Lock()
	defer fake.cellEventsMutex.Unlock()
	fake.CellEventsStub = nil
	if fake.cellEventsReturnsOnCall == nil {
		fake.cellEventsReturnsOnCall = make(map[int]struct {
			result1 <-chan models.CellEvent
		})
	}
	fake.cellEventsReturnsOnCall[i] = struct {
		result1 <-chan models.CellEvent
	}{result1}
}

func (fake *FakeCellPresenceClient) Cells(arg1 lager.Logger) (models.CellSet, error) {
	fake.cellsMutex.Lock()
	ret, specificReturn := fake.cellsReturnsOnCall[len(fake.cellsArgsForCall)]
	fake.cellsArgsForCall = append(fake.cellsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.CellsStub
	fakeReturns := fake.cellsReturns
	fake.recordInvocation("Cells", []interface{}{arg1})
	fake.cellsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCellPresenceClient) CellsCallCount() int {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	return len(fake.cellsArgsForCall)
}

func (fake *FakeCellPresenceClient) CellsCalls(stub func(lager.Logger) (models.CellSet, error)) {
	fake.cellsMutex.Lock()
	defer fake.cellsMutex.Unlock()
	fake.CellsStub = stub
}

func (fake *FakeCellPresenceClient) CellsArgsForCall(i int) lager.Logger {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	argsForCall := fake.cellsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCellPresenceClient) CellsReturns(result1 models.CellSet, result2 error) {
	fake.cellsMutex.Lock()
	defer fake.cellsMutex.Unlock()
	fake.CellsStub = nil
	fake.cellsReturns = struct {
		result1 models.CellSet
		result2 error
	}{result1, result2}
}

func (fake *FakeCellPresenceClient) CellsReturnsOnCall(i int, result1 models.CellSet, result2 error) {
	fake.cellsMutex.Lock()
	defer fake.cellsMutex.Unlock()
	fake.CellsStub = nil
	if fake.cellsReturnsOnCall == nil {
		fake.cellsReturnsOnCall = make(map[int]struct {
			result1 models.CellSet
			result2 error
		})
	}
	fake.cellsReturnsOnCall[i] = struct {
		result1 models.CellSet
		result2 error
	}{result1, result2}
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunner(arg1 lager.Logger, arg2 *models.CellPresence, arg3 time.Duration, arg4 time.Duration) ifrit.Runner {
	fake.newCellPresenceRunnerMutex.Lock()
	ret, specificReturn := fake.newCellPresenceRunnerReturnsOnCall[len(fake.newCellPresenceRunnerArgsForCall)]
	fake.newCellPresenceRunnerArgsForCall = append(fake.newCellPresenceRunnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.CellPresence
		arg3 time.Duration
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.NewCellPresenceRunnerStub
	fakeReturns := fake.newCellPresenceRunnerReturns
	fake.recordInvocation("NewCellPresenceRunner", []interface{}{arg1, arg2, arg3, arg4})
	fake.newCellPresenceRunnerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerCallCount() int {
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	return len(fake.newCellPresenceRunnerArgsForCall)
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerCalls(stub func(lager.Logger, *models.CellPresence, time.Duration, time.Duration) ifrit.Runner) {
	fake.newCellPresenceRunnerMutex.Lock()
	defer fake.newCellPresenceRunnerMutex.Unlock()
	fake.NewCellPresenceRunnerStub = stub
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerArgsForCall(i int) (lager.Logger, *models.CellPresence, time.Duration, time.Duration) {
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	argsForCall := fake.newCellPresenceRunnerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerReturns(result1 ifrit.Runner) {
	fake.newCellPresenceRunnerMutex.Lock()
	defer fake.newCellPresenceRunnerMutex.Unlock()
	fake.NewCellPresenceRunnerStub = nil
	fake.newCellPresenceRunnerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerReturnsOnCall(i int, result1 ifrit.Runner) {
	fake.newCellPresenceRunnerMutex.Lock()
	defer fake.newCellPresenceRunnerMutex.Unlock()
	fake.NewCellPresenceRunnerStub = nil
	if fake.newCellPresenceRunnerReturnsOnCall == nil {
		fake.newCellPresenceRunnerReturnsOnCall = make(map[int]struct {
			result1 ifrit.Runner
		})
	}
	fake.newCellPresenceRunnerReturnsOnCall[i] = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeCellPresenceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCellPresenceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ maintain.CellPresenceClient = new(FakeCellPresenceClient)
