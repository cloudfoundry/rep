// Code generated by counterfeiter. DO NOT EDIT.
package fake_internal

import (
	"sync"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/rep/generator/internal"
)

type FakeContainerDelegate struct {
	DeleteContainerStub        func(lager.Logger, string) bool
	deleteContainerMutex       sync.RWMutex
	deleteContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	deleteContainerReturns struct {
		result1 bool
	}
	deleteContainerReturnsOnCall map[int]struct {
		result1 bool
	}
	FetchContainerResultFileStub        func(lager.Logger, string, string) (string, error)
	fetchContainerResultFileMutex       sync.RWMutex
	fetchContainerResultFileArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
	}
	fetchContainerResultFileReturns struct {
		result1 string
		result2 error
	}
	fetchContainerResultFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetContainerStub        func(lager.Logger, string) (executor.Container, bool)
	getContainerMutex       sync.RWMutex
	getContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	getContainerReturns struct {
		result1 executor.Container
		result2 bool
	}
	getContainerReturnsOnCall map[int]struct {
		result1 executor.Container
		result2 bool
	}
	RunContainerStub        func(lager.Logger, *executor.RunRequest) bool
	runContainerMutex       sync.RWMutex
	runContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 *executor.RunRequest
	}
	runContainerReturns struct {
		result1 bool
	}
	runContainerReturnsOnCall map[int]struct {
		result1 bool
	}
	StopContainerStub        func(lager.Logger, string) bool
	stopContainerMutex       sync.RWMutex
	stopContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	stopContainerReturns struct {
		result1 bool
	}
	stopContainerReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerDelegate) DeleteContainer(arg1 lager.Logger, arg2 string) bool {
	fake.deleteContainerMutex.Lock()
	ret, specificReturn := fake.deleteContainerReturnsOnCall[len(fake.deleteContainerArgsForCall)]
	fake.deleteContainerArgsForCall = append(fake.deleteContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteContainerStub
	fakeReturns := fake.deleteContainerReturns
	fake.recordInvocation("DeleteContainer", []interface{}{arg1, arg2})
	fake.deleteContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerDelegate) DeleteContainerCallCount() int {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	return len(fake.deleteContainerArgsForCall)
}

func (fake *FakeContainerDelegate) DeleteContainerCalls(stub func(lager.Logger, string) bool) {
	fake.deleteContainerMutex.Lock()
	defer fake.deleteContainerMutex.Unlock()
	fake.DeleteContainerStub = stub
}

func (fake *FakeContainerDelegate) DeleteContainerArgsForCall(i int) (lager.Logger, string) {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	argsForCall := fake.deleteContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerDelegate) DeleteContainerReturns(result1 bool) {
	fake.deleteContainerMutex.Lock()
	defer fake.deleteContainerMutex.Unlock()
	fake.DeleteContainerStub = nil
	fake.deleteContainerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) DeleteContainerReturnsOnCall(i int, result1 bool) {
	fake.deleteContainerMutex.Lock()
	defer fake.deleteContainerMutex.Unlock()
	fake.DeleteContainerStub = nil
	if fake.deleteContainerReturnsOnCall == nil {
		fake.deleteContainerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.deleteContainerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) FetchContainerResultFile(arg1 lager.Logger, arg2 string, arg3 string) (string, error) {
	fake.fetchContainerResultFileMutex.Lock()
	ret, specificReturn := fake.fetchContainerResultFileReturnsOnCall[len(fake.fetchContainerResultFileArgsForCall)]
	fake.fetchContainerResultFileArgsForCall = append(fake.fetchContainerResultFileArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchContainerResultFileStub
	fakeReturns := fake.fetchContainerResultFileReturns
	fake.recordInvocation("FetchContainerResultFile", []interface{}{arg1, arg2, arg3})
	fake.fetchContainerResultFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerDelegate) FetchContainerResultFileCallCount() int {
	fake.fetchContainerResultFileMutex.RLock()
	defer fake.fetchContainerResultFileMutex.RUnlock()
	return len(fake.fetchContainerResultFileArgsForCall)
}

func (fake *FakeContainerDelegate) FetchContainerResultFileCalls(stub func(lager.Logger, string, string) (string, error)) {
	fake.fetchContainerResultFileMutex.Lock()
	defer fake.fetchContainerResultFileMutex.Unlock()
	fake.FetchContainerResultFileStub = stub
}

func (fake *FakeContainerDelegate) FetchContainerResultFileArgsForCall(i int) (lager.Logger, string, string) {
	fake.fetchContainerResultFileMutex.RLock()
	defer fake.fetchContainerResultFileMutex.RUnlock()
	argsForCall := fake.fetchContainerResultFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerDelegate) FetchContainerResultFileReturns(result1 string, result2 error) {
	fake.fetchContainerResultFileMutex.Lock()
	defer fake.fetchContainerResultFileMutex.Unlock()
	fake.FetchContainerResultFileStub = nil
	fake.fetchContainerResultFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerDelegate) FetchContainerResultFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.fetchContainerResultFileMutex.Lock()
	defer fake.fetchContainerResultFileMutex.Unlock()
	fake.FetchContainerResultFileStub = nil
	if fake.fetchContainerResultFileReturnsOnCall == nil {
		fake.fetchContainerResultFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.fetchContainerResultFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerDelegate) GetContainer(arg1 lager.Logger, arg2 string) (executor.Container, bool) {
	fake.getContainerMutex.Lock()
	ret, specificReturn := fake.getContainerReturnsOnCall[len(fake.getContainerArgsForCall)]
	fake.getContainerArgsForCall = append(fake.getContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	stub := fake.GetContainerStub
	fakeReturns := fake.getContainerReturns
	fake.recordInvocation("GetContainer", []interface{}{arg1, arg2})
	fake.getContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerDelegate) GetContainerCallCount() int {
	fake.getContainerMutex.RLock()
	defer fake.getContainerMutex.RUnlock()
	return len(fake.getContainerArgsForCall)
}

func (fake *FakeContainerDelegate) GetContainerCalls(stub func(lager.Logger, string) (executor.Container, bool)) {
	fake.getContainerMutex.Lock()
	defer fake.getContainerMutex.Unlock()
	fake.GetContainerStub = stub
}

func (fake *FakeContainerDelegate) GetContainerArgsForCall(i int) (lager.Logger, string) {
	fake.getContainerMutex.RLock()
	defer fake.getContainerMutex.RUnlock()
	argsForCall := fake.getContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerDelegate) GetContainerReturns(result1 executor.Container, result2 bool) {
	fake.getContainerMutex.Lock()
	defer fake.getContainerMutex.Unlock()
	fake.GetContainerStub = nil
	fake.getContainerReturns = struct {
		result1 executor.Container
		result2 bool
	}{result1, result2}
}

func (fake *FakeContainerDelegate) GetContainerReturnsOnCall(i int, result1 executor.Container, result2 bool) {
	fake.getContainerMutex.Lock()
	defer fake.getContainerMutex.Unlock()
	fake.GetContainerStub = nil
	if fake.getContainerReturnsOnCall == nil {
		fake.getContainerReturnsOnCall = make(map[int]struct {
			result1 executor.Container
			result2 bool
		})
	}
	fake.getContainerReturnsOnCall[i] = struct {
		result1 executor.Container
		result2 bool
	}{result1, result2}
}

func (fake *FakeContainerDelegate) RunContainer(arg1 lager.Logger, arg2 *executor.RunRequest) bool {
	fake.runContainerMutex.Lock()
	ret, specificReturn := fake.runContainerReturnsOnCall[len(fake.runContainerArgsForCall)]
	fake.runContainerArgsForCall = append(fake.runContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 *executor.RunRequest
	}{arg1, arg2})
	stub := fake.RunContainerStub
	fakeReturns := fake.runContainerReturns
	fake.recordInvocation("RunContainer", []interface{}{arg1, arg2})
	fake.runContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerDelegate) RunContainerCallCount() int {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return len(fake.runContainerArgsForCall)
}

func (fake *FakeContainerDelegate) RunContainerCalls(stub func(lager.Logger, *executor.RunRequest) bool) {
	fake.runContainerMutex.Lock()
	defer fake.runContainerMutex.Unlock()
	fake.RunContainerStub = stub
}

func (fake *FakeContainerDelegate) RunContainerArgsForCall(i int) (lager.Logger, *executor.RunRequest) {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	argsForCall := fake.runContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerDelegate) RunContainerReturns(result1 bool) {
	fake.runContainerMutex.Lock()
	defer fake.runContainerMutex.Unlock()
	fake.RunContainerStub = nil
	fake.runContainerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) RunContainerReturnsOnCall(i int, result1 bool) {
	fake.runContainerMutex.Lock()
	defer fake.runContainerMutex.Unlock()
	fake.RunContainerStub = nil
	if fake.runContainerReturnsOnCall == nil {
		fake.runContainerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.runContainerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) StopContainer(arg1 lager.Logger, arg2 string) bool {
	fake.stopContainerMutex.Lock()
	ret, specificReturn := fake.stopContainerReturnsOnCall[len(fake.stopContainerArgsForCall)]
	fake.stopContainerArgsForCall = append(fake.stopContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	stub := fake.StopContainerStub
	fakeReturns := fake.stopContainerReturns
	fake.recordInvocation("StopContainer", []interface{}{arg1, arg2})
	fake.stopContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerDelegate) StopContainerCallCount() int {
	fake.stopContainerMutex.RLock()
	defer fake.stopContainerMutex.RUnlock()
	return len(fake.stopContainerArgsForCall)
}

func (fake *FakeContainerDelegate) StopContainerCalls(stub func(lager.Logger, string) bool) {
	fake.stopContainerMutex.Lock()
	defer fake.stopContainerMutex.Unlock()
	fake.StopContainerStub = stub
}

func (fake *FakeContainerDelegate) StopContainerArgsForCall(i int) (lager.Logger, string) {
	fake.stopContainerMutex.RLock()
	defer fake.stopContainerMutex.RUnlock()
	argsForCall := fake.stopContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerDelegate) StopContainerReturns(result1 bool) {
	fake.stopContainerMutex.Lock()
	defer fake.stopContainerMutex.Unlock()
	fake.StopContainerStub = nil
	fake.stopContainerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) StopContainerReturnsOnCall(i int, result1 bool) {
	fake.stopContainerMutex.Lock()
	defer fake.stopContainerMutex.Unlock()
	fake.StopContainerStub = nil
	if fake.stopContainerReturnsOnCall == nil {
		fake.stopContainerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.stopContainerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeContainerDelegate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	fake.fetchContainerResultFileMutex.RLock()
	defer fake.fetchContainerResultFileMutex.RUnlock()
	fake.getContainerMutex.RLock()
	defer fake.getContainerMutex.RUnlock()
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	fake.stopContainerMutex.RLock()
	defer fake.stopContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerDelegate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.ContainerDelegate = new(FakeContainerDelegate)
