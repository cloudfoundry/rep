// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/rep"
	"code.cloudfoundry.org/rep/handlers"
)

type FakeMetricCollector struct {
	MetricsStub        func(lager.Logger) (*rep.ContainerMetricsCollection, error)
	metricsMutex       sync.RWMutex
	metricsArgsForCall []struct {
		arg1 lager.Logger
	}
	metricsReturns struct {
		result1 *rep.ContainerMetricsCollection
		result2 error
	}
	metricsReturnsOnCall map[int]struct {
		result1 *rep.ContainerMetricsCollection
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricCollector) Metrics(arg1 lager.Logger) (*rep.ContainerMetricsCollection, error) {
	fake.metricsMutex.Lock()
	ret, specificReturn := fake.metricsReturnsOnCall[len(fake.metricsArgsForCall)]
	fake.metricsArgsForCall = append(fake.metricsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.MetricsStub
	fakeReturns := fake.metricsReturns
	fake.recordInvocation("Metrics", []interface{}{arg1})
	fake.metricsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricCollector) MetricsCallCount() int {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return len(fake.metricsArgsForCall)
}

func (fake *FakeMetricCollector) MetricsCalls(stub func(lager.Logger) (*rep.ContainerMetricsCollection, error)) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = stub
}

func (fake *FakeMetricCollector) MetricsArgsForCall(i int) lager.Logger {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	argsForCall := fake.metricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricCollector) MetricsReturns(result1 *rep.ContainerMetricsCollection, result2 error) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = nil
	fake.metricsReturns = struct {
		result1 *rep.ContainerMetricsCollection
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricCollector) MetricsReturnsOnCall(i int, result1 *rep.ContainerMetricsCollection, result2 error) {
	fake.metricsMutex.Lock()
	defer fake.metricsMutex.Unlock()
	fake.MetricsStub = nil
	if fake.metricsReturnsOnCall == nil {
		fake.metricsReturnsOnCall = make(map[int]struct {
			result1 *rep.ContainerMetricsCollection
			result2 error
		})
	}
	fake.metricsReturnsOnCall[i] = struct {
		result1 *rep.ContainerMetricsCollection
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.MetricCollector = new(FakeMetricCollector)
